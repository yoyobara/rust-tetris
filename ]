mod constants;

use sdl2::{
    video::Window, render::Canvas, Sdl, EventPump, event::Event
};

struct TetrisGame {
    sdl_context: Sdl,
    canvas: Canvas<Window>,
    running: bool
}

impl TetrisGame {
    
    fn new() -> Result<Self, String> {
        let ctx = sdl2::init()?;
        let video_ctx = ctx.video()?;
        let win = video_ctx.window(constants::WINDOW_TITLE, constants::WINDOW_SIZE.0, constants::WINDOW_SIZE.1).position_centered().build().unwrap();
        let canvas = win.into_canvas().build().map_err(|_| "canvas creation failed")?;

        Ok( TetrisGame{ 
            sdl_context: ctx,
            canvas: canvas,
            running: false
        })
    }

    /* draw the screen */
    fn draw(&mut self) {
    }

    /* handle events */
    fn event_loop(&self, pump: &mut EventPump) {
        for event in pump.poll_iter() {
            match event {
                Event::Quit { _ } => {

                }
                _ => {}
            }
        }
    }

    fn update(&self) {

    }

    fn mainloop(&mut self) -> Result<(), String> {

        self.running = true;
        let mut event_pump = self.sdl_context.event_pump()?;

        while self.running {
            self.event_loop(&mut event_pump);

        }

        Ok(())
    }
}

fn main() {
    let mut tetris_game = TetrisGame::new().unwrap();

    tetris_game.mainloop().unwrap();
}
